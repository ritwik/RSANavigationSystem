/* Auto-generated by genmsg_cpp for file /home/rdro117/ros_workspace/rsa_modules/beaconfinder/msg/Beacon.msg */
#ifndef BEACONFINDER_MESSAGE_BEACON_H
#define BEACONFINDER_MESSAGE_BEACON_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"


namespace beaconfinder
{
template <class ContainerAllocator>
struct Beacon_ : public ros::Message
{
  typedef Beacon_<ContainerAllocator> Type;

  Beacon_()
  : ID(0)
  , x(0.0)
  , y(0.0)
  , distance(0.0)
  , angle(0.0)
  {
  }

  Beacon_(const ContainerAllocator& _alloc)
  : ID(0)
  , x(0.0)
  , y(0.0)
  , distance(0.0)
  , angle(0.0)
  {
  }

  typedef uint8_t _ID_type;
  uint8_t ID;

  typedef float _x_type;
  float x;

  typedef float _y_type;
  float y;

  typedef float _distance_type;
  float distance;

  typedef float _angle_type;
  float angle;


private:
  static const char* __s_getDataType_() { return "beaconfinder/Beacon"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "326f63ce28423410ee4a121fee9aacfd"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "# Beacon message type, for a single beacon\n\
\n\
# These IDs go from 0..n, for n beacons in increasing order of size\n\
uint8 ID\n\
\n\
# The x coordinate (robot relative) of the centre of the beacon\n\
float32 x\n\
\n\
# The y coordinate (robot relative) of the centre of the beacon\n\
float32 y\n\
\n\
# The distance (robot relative) of the centre of the beacon\n\
float32 distance\n\
\n\
# The angle (robot relative) of the centre of the beacon\n\
float32 angle\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, ID);
    ros::serialization::serialize(stream, x);
    ros::serialization::serialize(stream, y);
    ros::serialization::serialize(stream, distance);
    ros::serialization::serialize(stream, angle);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, ID);
    ros::serialization::deserialize(stream, x);
    ros::serialization::deserialize(stream, y);
    ros::serialization::deserialize(stream, distance);
    ros::serialization::deserialize(stream, angle);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(ID);
    size += ros::serialization::serializationLength(x);
    size += ros::serialization::serializationLength(y);
    size += ros::serialization::serializationLength(distance);
    size += ros::serialization::serializationLength(angle);
    return size;
  }

  typedef boost::shared_ptr< ::beaconfinder::Beacon_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::beaconfinder::Beacon_<ContainerAllocator>  const> ConstPtr;
}; // struct Beacon
typedef  ::beaconfinder::Beacon_<std::allocator<void> > Beacon;

typedef boost::shared_ptr< ::beaconfinder::Beacon> BeaconPtr;
typedef boost::shared_ptr< ::beaconfinder::Beacon const> BeaconConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::beaconfinder::Beacon_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::beaconfinder::Beacon_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace beaconfinder

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::beaconfinder::Beacon_<ContainerAllocator> > {
  static const char* value() 
  {
    return "326f63ce28423410ee4a121fee9aacfd";
  }

  static const char* value(const  ::beaconfinder::Beacon_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x326f63ce28423410ULL;
  static const uint64_t static_value2 = 0xee4a121fee9aacfdULL;
};

template<class ContainerAllocator>
struct DataType< ::beaconfinder::Beacon_<ContainerAllocator> > {
  static const char* value() 
  {
    return "beaconfinder/Beacon";
  }

  static const char* value(const  ::beaconfinder::Beacon_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::beaconfinder::Beacon_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Beacon message type, for a single beacon\n\
\n\
# These IDs go from 0..n, for n beacons in increasing order of size\n\
uint8 ID\n\
\n\
# The x coordinate (robot relative) of the centre of the beacon\n\
float32 x\n\
\n\
# The y coordinate (robot relative) of the centre of the beacon\n\
float32 y\n\
\n\
# The distance (robot relative) of the centre of the beacon\n\
float32 distance\n\
\n\
# The angle (robot relative) of the centre of the beacon\n\
float32 angle\n\
\n\
";
  }

  static const char* value(const  ::beaconfinder::Beacon_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::beaconfinder::Beacon_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::beaconfinder::Beacon_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.ID);
    stream.next(m.x);
    stream.next(m.y);
    stream.next(m.distance);
    stream.next(m.angle);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Beacon_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::beaconfinder::Beacon_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::beaconfinder::Beacon_<ContainerAllocator> & v) 
  {
    s << indent << "ID: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ID);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "distance: ";
    Printer<float>::stream(s, indent + "  ", v.distance);
    s << indent << "angle: ";
    Printer<float>::stream(s, indent + "  ", v.angle);
  }
};


} // namespace message_operations
} // namespace ros

#endif // BEACONFINDER_MESSAGE_BEACON_H

